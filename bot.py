import os
import json
from dotenv import load_dotenv
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

MAIN_KB = ReplyKeyboardMarkup(
    [["üìà –°–∏–≥–Ω–∞–ª—ã", "üìú –ò—Å—Ç–æ—Ä–∏—è"], ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]],
    resize_keyboard=True
)

def buy_signal() -> str:
    entry = 122.30
    t1, t2, t3 = 125.00, 127.40, 130.80
    return (
        f"üü¢ BUY: #LTCUSDT (Spot)\n\n"
        f"üìä –í—Ö–æ–¥: {entry:.2f} (¬±0.3%)\n"
        f"‚õî –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è: Close < MA50(D1) –∏–ª–∏ -1.5√óATR\n"
        f"üéØ –¶–µ–ª–∏:\n"
        f"  ‚Ä¢ T1: {t1:.2f} (+{(t1/entry-1)*100:.1f}%)\n"
        f"  ‚Ä¢ T2: {t2:.2f} (+{(t2/entry-1)*100:.1f}%)\n"
        f"  ‚Ä¢ T3: {t3:.2f} (+{(t3/entry-1)*100:.1f}%)\n\n"
        f"üîé –ü—Ä–∏—á–∏–Ω—ã: onchain_netflow_negative, sentiment_positive, macd_hist_positive_4h\n"
        f"üìà –î–æ–ª—è: –¥–æ 35% –ø–æ—Ä—Ç—Ñ–µ–ª—è, —Ä–∏—Å–∫ 1%\n\n"
        f"‚ö†Ô∏è –≠—Ç–æ –Ω–µ –∏–Ω–≤–µ—Å—Ç—Å–æ–≤–µ—Ç."
    )

def trim_signal() -> str:
    return (
        f"üéØ –§–∏–∫—Å–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏ (TRIM 50%)\n"
        f"‚úÖ #LTCUSDT (Spot)\n"
        f"üìä –¶–µ–Ω–∞: 125.00 ‚Äî –∑–∞–∫—Ä—ã—Ç—å 50% –ø–æ–∑–∏—Ü–∏–∏\n"
        f"‚ÑπÔ∏è –ü—Ä–∏—á–∏–Ω–∞: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å T1"
    )

def cancel_signal() -> str:
    return (
        f"‚õî –û—Ç–º–µ–Ω–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è\n"
        f"#LTCUSDT (Spot)\n"
        f"üìä –¶–µ–Ω–∞: 119.50 ‚Äî –ø—Ä–æ–±–∏—Ç–∞ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è\n\n"
        f"üß≠ –î–µ–π—Å—Ç–≤–∏–µ: –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é, –∂–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞."
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Crypto Signals Bot üí°\n"
        "–î–∞—é —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —Å–ø–æ—Ç–æ–≤–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –≤—Ö–æ–¥–æ–º, —Ü–µ–ª—è–º–∏ –∏ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–µ–π.\n\n"
        "üöÄ –ù–∞–∂–º–∏ ¬´üìà –°–∏–≥–Ω–∞–ª—ã¬ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–∏–º–µ—Ä."
    )
    await update.message.reply_text(text, reply_markup=MAIN_KB)

async def signals_demo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìâ –ì—Ä–∞—Ñ–∏–∫", callback_data="chart"),
         InlineKeyboardButton("‚Ñπ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ", callback_data="explain")]
    ])
    await update.message.reply_text(buy_signal(), reply_markup=kb, parse_mode=ParseMode.MARKDOWN)

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if q.data == "explain":
        explanation = {
            "symbol": "LTCUSDT",
            "score": 0.58,
            "confidence": 0.79,
            "drivers": ["onchain_netflow_negative", "sentiment_positive", "macd_hist_positive_4h"],
            "entry": 122.3,
            "targets": [125.0, 127.4, 130.8],
            "invalidation": "Close < MA50(D1) –∏–ª–∏ -1.5√óATR",
            "position_size": 0.35,
            "risk": 0.01
        }
        await q.message.reply_text(f"```json\n{json.dumps(explanation, indent=2, ensure_ascii=False)}\n```", parse_mode=ParseMode.MARKDOWN_V2)
    elif q.data == "chart":
        await q.message.reply_text("üìâ –ì—Ä–∞—Ñ–∏–∫: (—Ç—É—Ç –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏—Å–ª–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ —Å—Å—ã–ª–∫—É)")

async def text_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (update.message.text or "").strip()
    if txt == "üìà –°–∏–≥–Ω–∞–ª—ã":
        return await signals_demo(update, context)
    if txt == "üìú –ò—Å—Ç–æ—Ä–∏—è":
        return await update.message.reply_text("1) BUY LTC @122.3 ‚Üí TP2\n2) CANCEL BTCUSDT (-0.5%)")
    if txt == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        return await update.message.reply_text("WinRate: 78% ¬∑ PF: 1.42 ¬∑ MaxDD: 12%")
    if txt == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        return await update.message.reply_text("–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @your_support")

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(on_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_router))
    app.run_polling()

if __name__ == "__main__":
    main()
