import os
import requests
from dotenv import load_dotenv
from telegram import KeyboardButton, ReplyKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

analyze_coin = 'üìä –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã'
find_coin = 'üîç –ù–∞–π—Ç–∏ –º–æ–Ω–µ—Ç—É'
coin_labels = {
    "BTC": "BTC (–ë–∏—Ç–∫–æ–∏–Ω)",
    "ETH": "ETH (–≠—Ñ–∏—Ä–∏—É–º)",
    "SOL": "SOL (–°–æ–ª–∞–Ω–∞)",
    "DOGE": "DOGE (–î–æ–≥–∏–∫–æ–∏–Ω)",
    "ADA": "ADA (–ö–∞—Ä–¥–∞–Ω–æ)",
    "XRP": "XRP (–†–∏–ø–ª)",
    "DOT": "DOT (–ü–æ–ª–∫–∞–¥–æ—Ç)",
    "AVAX": "AVAX (–ê–≤–∞–ª–∞–Ω—á)",
    "LTC": "LTC (–õ–∞–π—Ç–∫–æ–∏–Ω)",
    "MATIC": "MATIC (–ü–æ–ª–∏–≥–æ–Ω)",
    "BNB": "BNB (–ë–∏–Ω–∞–Ω—Å –ö–æ–∏–Ω)",
    "LINK": "LINK (–ß–µ–π–Ω–ª–∏–Ω–∫)"
}


def chunked_buttons(items, row_size=2):
    return [items[i:i + row_size] for i in range(0, len(items), row_size)]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):

    keyboard = [[KeyboardButton(analyze_coin), KeyboardButton(find_coin)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:", reply_markup=reply_markup
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == analyze_coin:

        coin_buttons = chunked_buttons(
            [KeyboardButton(label) for label in coin_labels.values()], 
            row_size=2
        )

        coin_buttons.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
        reply_markup = ReplyKeyboardMarkup(coin_buttons, resize_keyboard=True)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", 
            reply_markup=reply_markup
        )

    elif text in coin_labels.values():
        symbol = next((k for k, v in coin_labels.items() if v == text), None)

        if symbol:

            info = get_binance_coin_analysis(symbol)
            keyboard = [[KeyboardButton("üîô –ù–∞–∑–∞–¥")]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                info, 
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )

        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–Ω–µ—Ç–∞.")

    elif text == find_coin:
        recommended = find_best_coins_to_buy(list(coin_labels.keys()), top_n=3)
        keyboard = [[KeyboardButton("üîô –ù–∞–∑–∞–¥")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            recommended, reply_markup=reply_markup, parse_mode="Markdown"
        )

    elif text == "üîô –ù–∞–∑–∞–¥":
        keyboard = [
            [KeyboardButton(analyze_coin), KeyboardButton(find_coin)]
        ]

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá",
            reply_markup=reply_markup
        )

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ üôÉ")


def get_binance_coin_analysis(symbol: str) -> str:
    pair = f"{symbol.upper()}USDT"
    url = "https://api.binance.com/api/v3/ticker/24hr"

    try:
        response = requests.get(url, params={"symbol": pair})
        data = response.json()

        if "code" in data:
            return f"‚ùå –ú–æ–Ω–µ—Ç–∞ {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Binance."

        price = float(data["lastPrice"])
        change = float(data["priceChangePercent"])
        volume = float(data["quoteVolume"])
        high = float(data["highPrice"])
        low = float(data["lowPrice"])
        trades = int(data["count"])

        if change > 2:
            trend = "–ë—ã—á–∏–π üü¢"
        elif change < -2:
            trend = "–ú–µ–¥–≤–µ–∂–∏–π üîª"
        else:
            trend = "–ë–æ–∫–æ–≤–æ–π üîÑ"

        return (
            f"üìä –ê–Ω–∞–ª–∏–∑ {symbol.upper()}USDT\n\n"
            f"üíµ –¶–µ–Ω–∞: `${price:,.2f}`\n"
            f"üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: `{change:.2f}%`\n"
            f"üìà –ú–∞–∫—Å / –ú–∏–Ω –∑–∞ 24—á: `${high:,.2f}` / `${low:,.2f}`\n"
            f"üìä –û–±—ä—ë–º –∑–∞ 24—á: `${volume:,.0f}`\n"
            f"üìç –ö–æ–ª-–≤–æ —Å–¥–µ–ª–æ–∫: `{trades}`\n"
            f"üìò –¢–µ–∫—É—â–∏–π —Ç—Ä–µ–Ω–¥: *{trend}*"
        )

    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"
    

def find_best_coins_to_buy(coin_list: list, top_n: int = 1) -> str:
    url = "https://api.binance.com/api/v3/ticker/24hr"
    best = []

    try:
        for symbol in coin_list:
            pair = f"{symbol}USDT"
            response = requests.get(url, params={"symbol": pair})
            data = response.json()

            if "code" in data:
                continue

            change = float(data["priceChangePercent"])
            volume = float(data["quoteVolume"])

            if volume > 5_000_000 and change > 0:
                best.append((symbol, change, volume))

        if not best:
            return "ü§∑ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–Ω–µ—Ç—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å."

        best.sort(key=lambda x: x[1], reverse=True)
        top = best[:top_n]

        msg = "üü¢ *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏:*\n\n"
        for symbol, change, volume in top:
            name = coin_labels.get(symbol, symbol)
            msg += f"‚Ä¢ {name}\n  –ò–∑–º–µ–Ω–µ–Ω–∏–µ: `{change:.2f}%`\n  –û–±—ä—ë–º: `${volume:,.0f}`\n\n"

        return msg

    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–æ–Ω–µ—Ç: {e}"


def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        handle_message
    ))

    print("Bot is running...")
    app.run_polling()


if __name__ == "__main__":
    main()
